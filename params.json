{"name":"Flask-empty","tagline":"An empty project skeleton / boilerplate for flask projects","body":"Flask Empty\r\n===========\r\nFlask-Empty is a simple **flask boilerplate** project for fast flask prototyping. Just\r\nclone the project, copy the **src/** with your project name and start.\r\n\r\n```shell\r\n# in linux/Mac\r\ngit clone https://github.com/italomaia/flask-empty flask-empty\r\ncp -r flask-empty/src <my project name>\r\nvim <my project name>/config.py # set your project configuration\r\n# and you're done\r\n```\r\n\r\nConfiguring\r\n===========\r\n\r\nFirst, install the requirement file that you need from the **requirements/** folder. Right now, dev.txt and prod.txt\r\ndo the same thing, so you can install either. Change them, and common.txt, to your needs.\r\n\r\n```\r\npip install -r requirements/dev.txt # install dev environment\r\n```\r\n\r\n**src/config.py** has some pre-set flask configuration classes for you. They're are all self explanatory.\r\n**Dev** is used by default with the runserver command, while **Testing** is used only when running tests. **Config**\r\nis a more general configuration. You can extend any of these classes to create your production config or some\r\nother special configuration.\r\n\r\nNote that the Flask-Script option, -d (disable debug) does not work as expected in Flask-Empty. If you want\r\nto start a non-debug internal server instance, use the **config.Config** configuration or write your own. Example:\r\n\r\n```python\r\n# loads config.Config configuration, which has DEBUG=False\r\n# -r is the Flask-Script option for internal server no-reload\r\npython manage.py -r -c Config\r\n```\r\n\r\nIf environment config named APP_CONFIG is set (as explained here http://flask.pocoo.org/docs/config/#configuring-from-files),\r\nit is used and overwrites any other set configuration.\r\n\r\nManage.py\r\n=========\r\n**manage.py** is a utility file, like the one found \r\nin [django](https://docs.djangoproject.com/en/1.6/ref/django-admin/ \"django manage.py\"), \r\nbut much simpler (for now). It uses flask-script to give you to commands like **runserver** \r\nor **create_db/drop_db** (which is disabled by default). If you wish to have new commands\r\navailable to you, just edit manage.py to your needs.\r\n\r\nTemplates\r\n=========\r\nThere are some error templates bundled with flask-empty by default. All empty right now. Just fill them up for\r\nyour project.\r\n\r\nMacros\r\n======\r\nYou can use the macros available in **templates/macros** to easily integrate your jinja templates with\r\nflask extensions like wtforms and commons tasks like showing flash messages. \r\n\r\nBlueprints\r\n==========\r\nAdd your blueprints through the src/config.Config.BLUEPRINTS. A blueprint can be add using the path to the\r\nBlueprint. See **examples/blog_example** for a example. Just make sure your blueprint has a views.py and \r\nit has a 'app' Blueprint instance. If unsure, \r\ncheck out **flask-empty/blueprint/** folder for an empty blueprint example.\r\n\r\nSQLAlchemy\r\n==========\r\nFlask-Empty comes with some Flask-SQLAlchemy configurations ready for you. Just uncomment the lines in your **main.py**\r\nand **database.py** files for support. For further integration, uncomment the lines in **manage.py** as instructed.\r\nIf you want to create your own command, see **commands.py** for examples. \r\n\r\n_ps: currently, create_db will only create your models will if they are imported somewhere in your application. By **somewhere**, try the\r\n*same module where your Blueprint instance is defined*.\r\n\r\nExamples\r\n========\r\nIf my explanation above is as crappy as I think it is, you're gonna want/need to take a look at **examples/**. They\r\nare a very nice starting point to learn how to configure your project. Wort-case-scenario, just copy it, rename it,\r\nconfigure it and be happy!\r\n\r\nFAQ\r\n===\r\n**Is flask-empty _boilerplate_ compatible with flask 0.x? Cuz' that's what my app uses.**\r\nRight now, flask-empty is a very simple project where many good practices and code examples were glued together.\r\nUntil recently I was focused in keeping backward compatibility with flask 0.8. Well, that goal is no more.\r\n Flask-empty will be compatible with the latest version of Flask and, by chance, with previous versions in case\r\n there is no backward incompatibility from any supported plugin or flask itself. Things will be easier this way.\r\n\r\n**So, which is the oldest version where flask-empty works?**\r\nIn my last test, version 0.8 but no guarantees here.\r\n\r\n**I think flask-empty should have _this_ and _that_ configured by default. Will you add support?**\r\nRight now, my goals are:\r\n\r\n* Make flask-empty real easy to start a project with\r\n* Keep things simple and robust\r\n\r\nIf your suggestion is simple, **VERY** useful and with little overhead, I'll probably consider adding it to the\r\nproject. If you make the code and send a pull request, then I'll consider it real hard. Now, if your suggestion is\r\n rejected or advised in a different approach, don't ge sad (you're awesome ;).\r\n\r\n**I just made a cool example with flask-empty and want to add it to examples.**\r\nPull request it for evaluation ;)\r\nJust keep in mind that good examples should be short (not really...) and focused in it's showcase.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}